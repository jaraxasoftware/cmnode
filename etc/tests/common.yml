type: test 
name: common 
spec:
  config:
    retries: 50
    wait: 10
  facts:
    app: test
    baseHeaders:
      object:
        content-type: application/json
    admin: c93a2af4-e82e-44f2-8034-a72a42440341
  scenarios: []
  backgrounds:
    - title: "Given an empty database"
      steps:
        - "When I init"
        - "Expect a 201 Created"
    - title: "Given that user is registered"
      steps:
        - "Register that user"
        - "Expect a 201 Created"
    - title: "Given user alice with password foo"
      steps:
        - "Given user details for alice"
        - "Register that user"
        - "Expect a 201 Created"
        - "Then I should expect a token"
        - "Given alice's email"
        - "Given password foo"
        - "Given alice's username"
        - "When I reset that password"
        - "Expect a 201 Created"
        - "Given no token"
    - title: "Given I am logged in"
      steps:
        - "When I login with email"
        - "Then I should expect a user"
        - "Then I should expect a token"
    - title: "Given a space"
      steps:
        - "When I create a space"
        - "Expect a 201 Created"
        - "Then I should expect a space" 
  steps:
    - title: "Given no app"
      set:
        app: ""
    - title: "Given no token"
      set:
        token: ""
    - title: "Given a wrong app"
      set:
        app: "wrong"
    - title: "When I init"
      procedure: api
      params:
        method: post
        path: "/init"
        token: 
          key: facts.admin
    - title: "Register that user"
      procedure: api
      params:
        method: post
        path: "/register"
        body:
          key: data.details
    - title: "When I reset that password"
      procedure: api
      params:
        method: post
        path: "/password/reset"
        body:
          email:
            key: data.email
          password:
            key: data.password
    - title: "When I login with email"
      procedure: api
      params:
        debug: true
        method: post
        path: "/login"
        body:
          email:
            key: data.email
          password:
            key: data.password
    - title: "When I login with username"
      procedure: api
      params:
        debug: true
        method: post
        path: "/login"
        body:
          username:
            key: data.username
          password:
            key: data.password
    - title: "When I logout"
      procedure: api
      params:
        debug: true
        method: post
        path: "/logout"
    - title: "Given user details for alice"
      set:
        details:
          first: "Alice"
          last: "In Chains"
          email: "alice@mail.com"
          lang: "en"
          username: "alice"
    - title: "Given user details for bob"
      set:
        details:
          first: "Bob"
          last: "Dylan"
          email: "bob@mail.com"
          lang: "en"
          username: "bob"
    - title: "Given another email"
      set:
        details:
          merge:
            - key: data.details
            - object:
                email: "another@mail.com"
    - title: "Given another username"
      set:
        details:
          merge:
            - key: data.details
            - object:
                username: "another"
    - title: "When I wait 1 second"
      wait:
        seconds: 1
    - title: "Given alice's email"
      set:
        email: "alice@mail.com"
    - title: "Given alice's username"
      set:
        username: "alice"
    - title: "Given a fake email"
      set:
        email: "fake@mail.com"
    - title: "Given a fake username"
      set:
        username: "fake"
    - title: "Given a fake token"
      set:
        token: "fake"
    - title: "Given a fake password"
      set:
        password: "fake"
    - title: "Given password foo"
      set:
        password: "foo"
    - title: "Expect a 201 Created"
      expect:
        match:
          key: data.latest
        with:
          object:
            status: 201
    - title: "Then I should receive a 200 OK"
      expect:
        match:
          key: data.latest
        with:
          object:
            status: 200
    - title: "Expect a 409 Conflict"
      expect:
        match:
          key: data.latest
        with:
          object:
            status: 409
    - title: "Then I should expect a forbidden error"
      expect:
        match:
          key: data.latest
        with:
          object:
            status: 401
    - title: "Then I should expect a user"
      expect:
        object:
          body:
            object:
              id:
                non_empty: text 
              first:
                non_empty: text
              last:
                non_empty: text
              email:
                any: email
      in:
        key: data.latest
      remember:
        user:
          key: body
    - title: "Then I should expect a token"
      expect:
        match:
          key: data.latest
        with:
          object:
            body:
              token:
                any: text
        remember:
          token:
            key: body.token
    - title: "When I create a space"
      procedure: api
      params:
        debug: true
        method: post
        path: "/spaces"
    - title: "Then I should expect a space"
      expect:
        object:
          body:
            object:
              id:
                non_empty: text
              title:
                non_empty: text
              owner:
                non_empty: text
      in:
        key: data.latest
      remember:
        space:
          key: body
    - title: "When I get my spaces"
      procedure: api
      params:
        debug: true
        method: get
        path: /spaces
    - title: "Then I should have one item"
      expect:
        object:
          body:
            list:
              size: 1
      in:
        key: data.latest
    - title: "Then I should have two items"
      expect:
        object:
          body:
            list:
              size: 2
      in:
        key: data.latest
    - title: "Then I should have that space id"
      expect:
        object:
          body:
            list:
              with:
                object:
                  id:
                    key: data.space.id
      in:
        key: data.latest
  procedures:
    - name: api
      spec:
        either:
          - when:
              is_set:
                key: params.body
            http:
              method:
                keyword: 
                  one_of:
                    - key: params.method
                    - get
              url:
                format: "~s~s"
                params:
                  - one_of:
                      - key: params.baseUrl
                      - key: settings.baseUrl
                  - key: params.path
              headers:
                merge:
                  - key: facts.baseHeaders
                  - object:
                      app:
                        one_of:
                          - key: data.app
                          - key: facts.app
                      authorization:
                        one_of:
                          - key: params.token
                          - key: data.token
                          - ""
              body:
                key: params.body
            debug:
              one_of:
                - key: params.debug
                - true
          - http:
              method:
                keyword: 
                  one_of:
                    - key: params.method
                    - get
              url:
                format: "~s~s"
                params:
                  - one_of:
                      - key: params.baseUrl
                      - key: settings.baseUrl
                  - key: params.path
              headers:
                merge:
                  - key: facts.baseHeaders
                  - object:
                      app:
                        one_of:
                          - key: data.app
                          - key: facts.app
                      authorization:
                        one_of:
                          - key: params.token
                          - key: data.token
                          - ""
            debug:
              one_of:
                - key: params.debug
                - true
      as:
        keyword:
          one_of:
            - key: params.as
            - latest

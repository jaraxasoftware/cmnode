type: test 
name: api 
spec:
  config:
    wait: 10
    retries: 50
  scenarios:
    
    - title: "Participants should create messages"
      debug: true
      tags:
        - messages
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given user bob with password foo"
        - "Given I am logged in as bob"
        - "Given a connection for bob"
        - "Given I am logged in as alice"
        - "Given a connection for alice"
        - "Given a space"
        - "Given some text"
        - "Given a message with that text"
        - "Then there should be an event with that message"
        - "Given bob's connection"
        - "Then there should not be an event with that message"
        - "Given a message with that text"
        - "Given a message with that text"
        - "Given a message with that text"
        - "Given a message with that text"
        - "Given today"
        - "When I get the messages for that day"
        - "Given a total of 5"
        - "Then I should receive that many messages"
        
    - title: "Participants should see join and leave events"
      debug: true
      tags:
        - events
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given user bob with password foo"
        - "Given user claire with password foo"
        - "Given I am logged in as bob"
        - "Given a connection for bob"
        - "Given I am logged in as claire"
        - "Given a connection for claire"
        - "Given I am logged in as alice"
        - "Given a connection for alice"
        - "Given a space"
        - "Given bob is in that space"
        - "Given user bob"
        - "Then that user should have joined that space"
        - "Given bob is no longer in that space"
        - "Then that user should have left that space"
        - "Given claire is in that space"
        - "Given user claire"
        - "Then that user should have joined that space"
        - "Given bob's connection"
        - "Then that user should not have joined that space"

    - title: "Should allow anonymous connections"
      debug: true
      tags:
        - ws
      steps:
        - "Given alice's username"
        - "When I connect"
        - "When I use that connection"
        - "Then that connection should be up"
    
    - title: "Should return a space participants"
      tags:
        - participants
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given user bob with password foo"
        - "Given I am logged in as alice"
        - "Given a connection for alice"
        - "Given a space"
        - "Given bob is in that space"
        - "Given I am logged in as bob"
        - "When I get that space's participants"
        - "Then I should receive a 200 OK"
        - "Given user bob"
        - "Then that user should be in that space"
        - "Given user alice"
        - "Then that user should be in that space"
        - "Given user claire with password foo"
        - "Given I am logged in as claire"
        - "When I get that space's participants"
        - "Then it should be forbidden"

    - title: "Should return space information"
      tags:
        - space
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given user bob with password foo"
        - "Given I am logged in as alice"
        - "Given a space"
        - "Given bob is in that space"
        - "Given I am logged in as bob"
        - "When I get that space"
        - "Then I should receive a 200 OK"
        - "Given role guest"
        - "Then I should have that role"
        - "Given user claire with password foo"
        - "Given I am logged in as claire"
        - "When I get that space"
        - "Then it should be forbidden"
    
    - title: "Space owners should be able to invite users to their spaces"
      tags:
        - invite
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given user bob with password foo"
        - "Given user claire with password foo"
        - "Given I am logged in as alice"
        - "Given a space"
        - "Given bob's email"
        - "When I invite that email to that space"
        - "Then I should receive a 201 Created"
        - "When I invite that email to that space"
        - "Then I should receive a 201 Created"
        - "Given I am logged in as bob"
        - "When I get my spaces"
        - "Then I should receive a 200 OK"
        - "Then I should have one item"
        - "Then I should be a guest in that space"
        - "Given claire's email"
        - "When I invite that email to that space"
        - "Then it should be forbidden"

    - title: "Participants can leave a space"
      tags:
        - leave
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given user bob with password foo"
        - "Given I am logged in as alice"
        - "Given a space"
        - "Given bob is in that space"
        - "Given I am logged in as bob"
        - "Given user bob"
        - "When I remove that participant"
        - "Then I should receive a 200 OK"
        - "When I get that space"
        - "Then it should be forbidden"
        - "Given I am logged in as alice"
        - "When I get that space's participants"
        - "Then I should receive a 200 OK"
        - "Given user bob"
        - "Then that user should not be in that space"

    - title: "Owners can't leave spaces"
      tags:
        - leave
        - forbidden
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given user bob with password foo"
        - "Given user claire with password foo"
        - "Given I am logged in as claire"
        - "Given I am logged in as alice"
        - "Given a space"
        - "Given bob is in that space"
        - "Given claire is in that space"
        - "Given user alice"
        - "When I remove that participant"
        - "Then it should be forbidden"
        - "Given I am logged in as bob"
        - "Given user alice"
        - "When I remove that participant"
        - "Then it should be forbidden"
        - "Given user claire"
        - "When I remove that participant"
        - "Then it should be forbidden"


    - title: "Users should not be allowed to invite others to spaces they don't own"
      tags:
        - invite
        - forbidden
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given user bob with password foo"
        - "Given I am logged in as alice"
        - "Given a space"
        - "Given I am logged in as bob"
        - "Given bob's email"
        - "When I invite that email to that space"
        - "Then it should be forbidden"

    - title: "Should not allow anonymous users to create spaces"
      tags:
        - spaces
        - anonymous
      steps:
        - "Given an empty database"
        - "When I create a space"
        - "Then it should be forbidden"
    
    - title: "Should not allow users to create spaces without a proper app"
      tags:
        - spaces
        - forbidden 
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given I am logged in"
        - "Given no app"
        - "When I create a space"
        - "Then it should be forbidden"
        - "Given a wrong app"
        - "Then it should be forbidden"
    
    - title: "Unauthorized users should not create spaces"
      tags:
        - spaces
        - forbidden 
      steps:
        - "Given an empty database"
        - "Given a fake token"
        - "When I create a space"
        - "Then it should be forbidden"

    - title: "Users should be able to create spaces in a valid app"
      tags:
        - spaces
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given I am logged in"
        - "Given a space"
        - "When I get my spaces"
        - "Then I should receive a 200 OK"
        - "Then I should have one item"
        - "Then I should be the owner of that space"
        - "Given a space"
        - "When I get my spaces"
        - "Then I should receive a 200 OK"
        - "Then I should have two items"
        - "Then I should be the owner of that space"

    - title: "By default, spaces should be private"
      tags:
        - spaces
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given I am logged in as alice"
        - "Given a space"
        - "Given user bob with password foo"
        - "Given I am logged in as bob"
        - "Given a space"
        - "Given I am logged in as alice"
        - "When I get my spaces"
        - "Then I should have one item"
        - "Then all items should belong to that user"
        - "Given I am logged in as bob"
        - "When I get my spaces"
        - "Then I should have one item"
        - "Then all items should belong to that user"

    - title: "Should not allow to init without a proper app"
      tags:
        - register
        - forbidden
      steps:
        - "Given no app"
        - "When I init"        
        - "Then it should be forbidden"
        - "Given a wrong app"
        - "When I init"        
        - "Then it should be forbidden"
    
    - title: "Should not allow to register without a proper app"
      tags:
        - register
        - forbidden
      steps:
        - "Given an empty database"
        - "Given user details for alice"
        - "Given no app"
        - "Register that user"
        - "Then it should be forbidden"
        - "Given a wrong app"
        - "Register that user"
        - "Then it should be forbidden"
    
    - title: "Should not allow to register with a token"
      tags:
        - register
        - forbidden
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given I am logged in"
        - "Given user details for bob"
        - "Register that user"
        - "Then it should be forbidden"

    - title: "Should not register email twice"
      tags:
        - register
      steps:
        - "Given an empty database"
        - "Given user details for alice"
        - "Given that user is registered"
        - "Given another username"
        - "Register that user"
        - "Expect a 409 Conflict"

    - title: "Should not register username twice"
      tags:
        - register
      steps:
        - "Given an empty database"
        - "Given user details for alice"
        - "Given that user is registered"
        - "Given another email"
        - "Register that user"
        - "Expect a 409 Conflict"

    - title: "Should reset passwords"
      tags: 
        - passwd_reset
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given a fake email"
        - "When I reset that password"
        - "Then it should be forbidden"
        - "Given alice's email"
        - "Given a fake token"
        - "When I reset that password"
        - "Then it should be forbidden"

    - title: "Should consume password reset tokens"
      tags: 
        - consume 
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "When I reset that password"
        - "Then it should be forbidden"
       
    - title: "Should login with email"
      tags:
        - login
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "When I login with email"
        - "Then I should expect a user"
        - "Then I should expect a token"
        - "Given a fake password"
        - "When I login with email"
        - "Then it should be forbidden"
        - "Given password foo"
        - "Given a fake email"
        - "When I login with email"
        - "Then it should be forbidden"

    - title: "Should login with username"
      tags:
        - login
        - current
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "When I login with username"
        - "Then I should expect a user"
        - "Then I should expect a token"
        - "Given a fake password"
        - "When I login with username"
        - "Then it should be forbidden"
        - "Given password foo"
        - "Given a fake username"
        - "When I login with username"
        - "Then it should be forbidden"
    
    - title: "Should not allow to login with a token"
      tags:
        - login
        - forbidden
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "Given I am logged in"
        - "Then I should expect a token"
        - "When I login with username"
        - "Then it should be forbidden"

    - title: "Should logout"
      debug: true
      tags:
        - logout
      steps:
        - "Given an empty database"
        - "Given user alice with password foo"
        - "When I login with email"
        - "Then I should expect a token"
        - "When I logout"
        - "Then I should receive a 200 OK"
  facts:
    app: test
    baseHeaders:
      object:
        content-type: application/json
    admin: c93a2af4-e82e-44f2-8034-a72a42440341
  backgrounds:
    - title: "Given an empty database"
      steps:
        - "When I init"
        - "Then I should receive a 201 Created"
    - title: "Given that user is registered"
      steps:
        - "Register that user"
        - "Then I should receive a 201 Created"
    - title: "Given user alice with password foo"
      steps:
        - "Given no token"
        - "Given user details for alice"
        - "Register that user"
        - "Then I should receive a 201 Created"
        - "Then I should expect a token"
        - "Given alice's email"
        - "Given password foo"
        - "Given alice's username"
        - "When I reset that password"
        - "Then I should receive a 201 Created"
        - "Given no token"
    - title: "Given user bob with password foo"
      steps:
        - "Given no token"
        - "Given user details for bob"
        - "Register that user"
        - "Then I should receive a 201 Created"
        - "Then I should expect a token"
        - "Given bob's email"
        - "Given password foo"
        - "Given bob's username"
        - "When I reset that password"
        - "Then I should receive a 201 Created"
        - "Given no token"
    - title: "Given user claire with password foo"
      steps:
        - "Given no token"
        - "Given user details for claire"
        - "Register that user"
        - "Then I should receive a 201 Created"
        - "Then I should expect a token"
        - "Given claire's email"
        - "Given password foo"
        - "Given claire's username"
        - "When I reset that password"
        - "Then I should receive a 201 Created"
        - "Given no token"
    - title: "Given I am logged in"
      steps:
        - "When I login with email"
        - "Then I should expect a user"
        - "Then I should expect a token"
    - title: "Given I am logged in as alice"
      steps:
        - "Given no token"
        - "Given alice's email"
        - "Given password foo"
        - "When I login with email"
        - "Then I should expect a user"
        - "Then I should expect a token"
        - "Given I remember that user as alice"
    - title: "Given I am logged in as bob"
      steps:
        - "Given no token"
        - "Given bob's email"
        - "Given password foo"
        - "When I login with email"
        - "Then I should expect a user"
        - "Then I should expect a token"
        - "Given I remember that user as bob"
    - title: "Given I am logged in as claire"
      steps:
        - "Given no token"
        - "Given claire's email"
        - "Given password foo"
        - "When I login with email"
        - "Then I should expect a user"
        - "Then I should expect a token"
        - "Given I remember that user as claire"
    - title: "Given a space"
      steps:
        - "When I create a space"
        - "Then I should receive a 201 Created"
        - "Then I should expect a space"
    - title: "Given a message with that text"
      steps:
        - "When I create a message with that text"
        - "Then I should receive a 201 Created"
        - "Then I should receive a message"
    - title: "Given bob is in that space"
      steps:
        - "Given bob's email"
        - "When I invite that email to that space"
        - "Then I should receive a 201 Created"
    - title: "Given claire is in that space"
      steps:
        - "Given claire's email"
        - "When I invite that email to that space"
        - "Then I should receive a 201 Created"
    - title: "Given bob is no longer in that space"
      steps:
        - "Given user bob"
        - "When I remove that participant"
        - "Then I should receive a 200 OK"
    - title: "Given a connection for alice"
      steps:
        - "Given alice's username"
        - "When I connect"
        - "When I use that connection"
        - "Then that connection should be up"
        - "When I authenticate that connection"
        - "Then I should receive a 201 Created on that connection"
    - title: "Given a connection for bob"
      steps:
        - "Given bob's username"
        - "When I connect"
        - "When I use that connection"
        - "Then that connection should be up"
        - "When I authenticate that connection"
        - "Then I should receive a 201 Created on that connection"
    - title: "Given a connection for claire"
      steps:
        - "Given claire's username"
        - "When I connect"
        - "When I use that connection"
        - "Then that connection should be up"
        - "When I authenticate that connection"
        - "Then I should receive a 201 Created on that connection"
    - title: "Given bob's connection"
      steps:
        - "Given bob's username"
        - "When I use that connection"
    - title: "Given claire's connection"
      steps:
        - "Given claire's username"
        - "When I use that connection"
  steps:
    - title: "Given no app"
      set:
        app: ""
    - title: "Given no token"
      set:
        token: ""
    - title: "Given a wrong app"
      set:
        app: "wrong"
    - title: "When I init"
      procedure: api
      params:
        method: post
        path: "/init"
        token: 
          key: facts.admin
    - title: "Register that user"
      procedure: api
      params:
        method: post
        path: "/register"
        body:
          key: data.details
    - title: "When I reset that password"
      procedure: api
      params:
        method: post
        path: "/password/reset"
        body:
          email:
            key: data.email
          password:
            key: data.password
    - title: "When I login with email"
      procedure: api
      params:
        debug: true
        method: post
        path: "/login"
        body:
          email:
            key: data.email
          password:
            key: data.password
    - title: "When I login with username"
      procedure: api
      params:
        debug: true
        method: post
        path: "/login"
        body:
          username:
            key: data.username
          password:
            key: data.password
    - title: "When I logout"
      procedure: api
      params:
        debug: true
        method: post
        path: "/logout"
    - title: "Given user details for alice"
      set:
        details:
          object:
            first: "Alice"
            last: "In Chains"
            email: "alice@mail.com"
            lang: "en"
            username: "alice"
    - title: "Given user details for bob"
      set:
        details:
          object:
            first: "Bob"
            last: "Dylan"
            email: "bob@mail.com"
            lang: "en"
            username: "bob"
    - title: "Given user details for claire"
      set:
        details:
          object:
            first: "Claire"
            last: "DeLune"
            email: "claire@mail.com"
            lang: "en"
            username: "claire"
    - title: "Given another email"
      set:
        details:
          merge:
            - key: data.details
            - object:
                email: "another@mail.com"
    - title: "Given another username"
      set:
        details:
          merge:
            - key: data.details
            - object:
                username: "another"
    - title: "Given I remember that user as alice"
      set:
        alice:
          key: data.user
    - title: "Given user alice"
      set:
        user:
          key: data.alice
    - title: "Given I remember that user as bob"
      set:
        bob:
          key: data.user
    - title: "Given user bob"
      set:
        user:
          key: data.bob
    - title: "Given I remember that user as claire"
      set:
        claire:
          key: data.user
    - title: "Given user claire"
      set:
        user:
          key: data.claire
    - title: "When I wait 1 second"
      wait:
        seconds: 1
    - title: "When I wait 5 seconds"
      wait:
        seconds: 5
    - title: "Given alice's email"
      set:
        email: "alice@mail.com"
    - title: "Given alice's username"
      set:
        username: "alice"
    - title: "Given bob's email"
      set:
        email: "bob@mail.com"
    - title: "Given bob's username"
      set:
        username: "bob"
    - title: "Given claire's email"
      set:
        email: "claire@mail.com"
    - title: "Given claire's username"
      set:
        username: "claire"
    - title: "Given a fake email"
      set:
        email: "fake@mail.com"
    - title: "Given a fake username"
      set:
        username: "fake"
    - title: "Given a fake token"
      set:
        token: "fake"
    - title: "Given a fake password"
      set:
        password: "fake"
    - title: "Given password foo"
      set:
        password: "foo"
    - title: "Then I should receive a 201 Created"
      expect:
        match:
          key: data.latest
        with:
          object:
            status: 201
    - title: "Then I should receive a 200 OK"
      expect:
        match:
          key: data.latest
        with:
          object:
            status: 200
    - title: "Expect a 409 Conflict"
      expect:
        match:
          key: data.latest
        with:
          object:
            status: 409
    - title: "Then it should be forbidden"
      expect:
        match:
          key: data.latest
        with:
          object:
            status: 401
    - title: "Then I should expect a user"
      expect:
        object:
          body:
            object:
              id:
                non_empty: text 
              first:
                non_empty: text
              last:
                non_empty: text
              email:
                any: email
      in:
        key: data.latest
      remember:
        user:
          key: body
    - title: "Then I should expect a token"
      expect:
        match:
          key: data.latest
        with:
          object:
            body:
              token:
                any: text
        remember:
          token:
            key: body.token
    - title: "When I create a space"
      procedure: api
      params:
        debug: true
        method: post
        path: "/spaces"
    - title: "Then I should expect a space"
      expect:
        object:
          body:
            object:
              id:
                non_empty: text
              title:
                non_empty: text
              owner:
                non_empty: text
      in:
        key: data.latest
      remember:
        space:
          key: body
    - title: "When I get my spaces"
      procedure: api
      params:
        debug: true
        method: get
        path: /spaces
    - title: "When I get that space"
      procedure: api
      params:
        debug: true
        method: get
        path:
          format: "/spaces/~s"
          params:
            - key: data.space.id
    - title: "Then I should have one item"
      expect:
        object:
          body:
            list:
              size: 1
      in:
        key: data.latest
    - title: "Then I should have two items"
      expect:
        object:
          body:
            list:
              size: 2
      in:
        key: data.latest
    - title: "Then I should be the owner of that space"
      expect:
        object:
          body:
            list:
              with:
                object:
                  role: owner
                  id:
                    key: data.space.id
      in:
        key: data.latest
    - title: "Then I should be a guest in that space"
      expect:
        object:
          body:
            list:
              with:
                object:
                  role: guest
                  id:
                    key: data.space.id
      in:
        key: data.latest
    - title: "Then all items should belong to that user"
      expect:
        object:
          body:
            list:
              object:
                owner:
                  key: data.user.id
      in:
        key: data.latest
    - title: "When I invite that email to that space"
      procedure: api
      params:
        debug: true
        method: post
        path: /invites
        body:
          space:
            key: data.space.id
          email:
            key: data.email
    - title: "When I connect"
      debug: true
      connect: @settings.wsUrl
        ##      headers:
        ##        authorization:
        ##          one_of:
        ##            - key: data.token
        ##            - ""
        ##        app:
        ##          one_of:
        ##            - key: data.app
        ##            - key: facts.app
      as: @data.username
    - title: "Then that connection should be up"
      probe:
        key: data.conn
      status: up
    - title: "Then that connection should be down"
      probe:
        key: data.conn
      status: down 
    - title: "When I use that connection"
      set:
        conn:
          key: data.username
    - title: "When I subscribe to that space"
      procedure: api
      params:
        debug: true
        method: post
        path: /subscriptions
        body:
          space:
            key: data.space.id
    - title: "When I get that space's participants"
      procedure: api
      params:
        debug: true
        method: get
        path:
          format: "/spaces/~s/participants"
          params:
            - key: data.space.id
    - title: "Then that user should be in that space"
      expect:
        body:
          list:
            with:
              object:
                id:
                  key: data.user.id
                role:
                  non_empty: text
      in:
        key: data.latest
    - title: "Then that user should not be in that space"
      fail: "Then that user should be in that space"
    - title: "Given role guest"
      set:
        role: guest
    - title: "Then I should have that role"
      expect:
        body:
          role:
            key: data.role
      in:
        key: data.latest
    - title: "Then that user should have joined that space"
      receive:
        participant:
          key: data.user.id
        space:
          key: data.space.id 
        event: joined
      from:
        key: data.conn
    - title: "Then that user should not have joined that space"
      fail: "Then that user should have joined that space"
    - title: "Then that user should have left that space"
      receive:
        participant:
          key: data.user.id
        space:
          key: data.space.id 
        event: left
      from:
        key: data.conn
    - title: "Then that user should not have left that space"
      fail: "Then that user should have left that space"
    - title: "When I remove that participant"
      procedure: api
      params:
        method: delete
        path:
          format: "/spaces/~s/participants/~s"
          params:
            - key: data.space.id
            - key: data.user.id
    - title: "Given some text"
      set:
        object:
          text: "This is a message"
    - title: "When I create a message with that text"
      procedure: api
      params:
        method: post
        path: 
          format: "/spaces/~s/messages"
          params:
            - key: data.space.id
        body:
          object:
            data:
              key: data.text
    - title: "Then I should receive a message"
      expect:
        object:
          body:
            object:
              id:
                non_empty: text
              data:
                non_empty: text
              owner:
                non_empty: text
              space:
                non_empty: text
              timestamp:
                any: number
      in:
        key: data.latest
      remember:
        message:
          key: body
    - title: "Then there should be an event with that message"
      receive:
        message:
          key: data.message.id
        space:
          key: data.space.id 
        event: message 
      from:
        key: data.conn
    - title: "Then there should not be an event with that message"
      fail: "Then there should be an event with that message"
    - title: "When I authenticate that connection"
      send:
        object:
          app: @facts.app
          token: @data.token
      to: @data.conn
    - title: "Then I should receive a 201 Created on that connection"
      receive:
        status: 201
      from: @data.conn
    - title: "Given today"
      set:
        ago: 0
    - title: "When I get the messages for that day"
      procedure: api
      params:
        method: get
        path: 
          format: "/spaces/~s/messages/~s"
          params:
            - key: data.space.id
            - text:
                key: data.ago
    - title: "Given a total of 5"
      set:
        total: 5
    - title: "Then I should receive that many messages"
      expect:
        body:
          all:
            - list:
                size:
                  key: data.total
            - list: 
                object:
                  data:
                    non_empty: text
                  space:
                    key: data.space.id
      in:
        key: data.latest
  procedures:
    - name: api
      spec:
        either:
          - when:
              is_set:
                key: params.body
            http:
              method:
                keyword: 
                  one_of:
                    - key: params.method
                    - get
              url:
                format: "~s~s"
                params:
                  - one_of:
                      - key: params.baseUrl
                      - key: settings.baseUrl
                  - key: params.path
              headers:
                merge:
                  - key: facts.baseHeaders
                  - object:
                      app:
                        one_of:
                          - key: data.app
                          - key: facts.app
                      authorization:
                        one_of:
                          - key: params.token
                          - key: data.token
                          - ""
              body:
                key: params.body
            debug:
              one_of:
                - key: params.debug
                - true
          - http:
              method:
                keyword: 
                  one_of:
                    - key: params.method
                    - get
              url:
                format: "~s~s"
                params:
                  - one_of:
                      - key: params.baseUrl
                      - key: settings.baseUrl
                  - key: params.path
              headers:
                merge:
                  - key: facts.baseHeaders
                  - object:
                      app:
                        one_of:
                          - key: data.app
                          - key: facts.app
                      authorization:
                        one_of:
                          - key: params.token
                          - key: data.token
                          - ""
            debug:
              one_of:
                - key: params.debug
                - true
      as:
        keyword:
          one_of:
            - key: params.as
            - latest
